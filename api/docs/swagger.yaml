definitions:
  controllers.ContainerStatusResponse:
    properties:
      container_id:
        type: string
      created:
        type: string
      is_running:
        type: boolean
      last_used:
        type: string
      port:
        type: integer
      status:
        type: string
      user_id:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
      timestamp:
        type: string
    type: object
  controllers.MessageRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  controllers.MessageResponse:
    properties:
      container_id:
        type: string
      processed_at:
        type: string
      response:
        type: string
      user_id:
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - username
    type: object
  controllers.RegisterResponse:
    properties:
      container_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      token:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  controllers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  controllers.UpdateUserRequest:
    properties:
      email:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  controllers.UserProfileResponse:
    properties:
      container_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      last_active:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/containers/{containerID}:
    get:
      description: Returns container information by ID (only accessible by the container
        owner)
      parameters:
      - description: Container ID
        in: path
        name: containerID
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container information
          schema:
            $ref: '#/definitions/controllers.ContainerStatusResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get container by ID
      tags:
      - Container Management
  /api/v1/containers/message:
    post:
      consumes:
      - application/json
      description: Sends a message to the user's Jarvis agent running in their dedicated
        container
      parameters:
      - description: Message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.MessageRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message processed successfully
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Send message to user's agent
      tags:
      - Agent Communication
  /api/v1/containers/start:
    post:
      description: Starts the user's agent container if it's stopped
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container started successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Failed to start container
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Start user's container
      tags:
      - Container Management
  /api/v1/containers/status:
    get:
      description: Returns the status of the user's agent container
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container status
          schema:
            $ref: '#/definitions/controllers.ContainerStatusResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get container status
      tags:
      - Container Management
  /api/v1/containers/stop:
    post:
      description: Stops the user's agent container
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container stopped successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Failed to stop container
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Stop user's container
      tags:
      - Container Management
  /api/v1/users/{userID}:
    delete:
      description: Deletes the authenticated user's account and associated container
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete user account
      tags:
      - User Management
    get:
      description: Returns user information by ID (only accessible by the user themselves)
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/controllers.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get user by ID
      tags:
      - User Management
    put:
      consumes:
      - application/json
      description: Updates the authenticated user's profile information
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Updated user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated user information
          schema:
            $ref: '#/definitions/controllers.UserProfileResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update user information
      tags:
      - User Management
  /api/v1/users/profile:
    get:
      description: Returns the authenticated user's profile information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/controllers.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get user profile
      tags:
      - User Management
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account and spins up a dedicated Docker container
        with a Jarvis agent instance
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - User Management
swagger: "2.0"
